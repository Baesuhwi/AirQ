<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yjc.airq.mapper.ProductMapper">
	<resultMap id="ProductVO"
		type="com.yjc.airq.domain.ProductVO">
		<result property="product_code" column="product_code"></result>
		<result property="product_name" column="product_name"></result>
		<result property="product_detail" column="product_detail"></result>
		<result property="product_price" column="product_price"></result>
		<result property="p_space" column="p_space"></result>
		<result property="measure_point" column="measure_point"></result>
		<result property="company_code" column="company_code"></result>
		<association property="sellnum" column="product_code"
			select="getSellnum" />
		<association property="staravg" column="product_code"
			select="getStaravg" />
		<association property="file_name" column="product_code"
			select="getThumbnail" />
		<association property="companyVO" column="company_code"
			select="getCompany" />
		<collection property="areaVO" column="product_code"
			javaType="java.util.ArrayList" ofType="com.yjc.airq.domain.AreaVO"
			select="getAreaByCode" />
		<collection property="matterVO" column="product_code"
			javaType="java.util.ArrayList" ofType="com.yjc.airq.domain.MatterVO"
			select="getMatterByCode" />
	</resultMap>

	<!-- 사용자가 사는 지역에서 판매순위 1~3위까지의 상품 가져오기 -->
	<select id="recommendList" resultMap="ProductVO">
		select p.*
		from (
		select p.product_code,count(p.product_code) as count
		from product p, demand d
		where p.product_code = d.product_code
		and
		d.d_zipcode = #{zipcode}
		group by p.product_code
		order by count desc) a,
		product p
		where p.product_code = a.product_code
		and <![CDATA[rownum <= 3]]>
	</select>

	<!-- 상품 전체 리스트 가져오기 -->
	<select id="productList" resultMap="ProductVO">
		select X.rnum, X.*
		from(
		select rownum as rnum, A.*
		from (
		select *
		from
		product p
		<choose>
			<when test="sort.equals('sellnum')">
				order by (
				select count(*)
				from demand d,payment pa
				where p.product_code=d.product_code and d.demand_code =
				pa.demand_code
				and pa.refund_whether='n') desc, p.product_name
			</when>
			<when test="sort.equals('hprice')">
				order by p.product_price desc, p.product_name
			</when>
			<when test="sort.equals('lprice')">
				order by p.product_price, p.product_name
			</when>
			<when test="sort.equals('staravg')">
				order by (
				select avg(pa.STAR_SCORE)
				from demand
				d,payment pa
				where p.product_code=d.product_code and d.demand_code =
				pa.demand_code
				and pa.refund_whether='n') desc nulls last,
				p.product_name
			</when>
		</choose>)
		A
		where <![CDATA[rownum <= #{endnum}]]>)
		X
		where <![CDATA[X.rnum >= #{startnum}]]>
	</select>

	<!-- 상품 전체 리스트의 개수 가져오기 -->
	<select id="productCount" resultType="int">
		select count(*) from
		product
	</select>

	<!-- 각 상품을 올린 회사정보 가져오기 -->
	<select id="getCompany"
		resultType="com.yjc.airq.domain.Company_InfoVO">
		select * from company_info where company_code =
		#{company_code}
	</select>

	<!-- 서비스 가능한 상품지역 가져오기 -->
	<select id="getAreaByCode"
		resultType="com.yjc.airq.domain.AreaVO">
		select a.*,pa.product_code
		from area a, p_possible_area pa
		where a.area_code = pa.area_code and pa.product_code=#{product_code}
	</select>

	<!-- 서비스 가능한 물질코드 가져오기 -->
	<select id="getMatterByCode"
		resultType="com.yjc.airq.domain.MatterVO">
		select m.*,pm.product_code
		from matter m, p_measure_matter
		pm
		where m.matter_code = pm.matter_code and
		pm.product_code=#{product_code}
	</select>

	<!-- 상품의 판매수 가져오기 -->
	<select id="getSellnum" resultType="String">
		select to_char(count(*)) as
		sellnum
		from product p, demand d, payment pa
		where p.product_code =
		d.product_code and d.demand_code = pa.demand_code and
		p.product_code=#{product_code} and refund_whether='n'
	</select>

	<!-- 상품의 만족도 점수 가져오기 -->
	<select id="getStaravg" resultType="String">
		select
		nvl(to_char(avg(pa.STAR_SCORE),99.9),'0.0') as staravg
		from product p,
		demand d, payment pa
		where p.product_code = d.product_code and
		d.demand_code = pa.demand_code and p.product_code=#{product_code} and
		refund_whether='n'
	</select>

	<!-- 상품의 썸네일 파일명 가져오기 -->
	<select id="getThumbnail" resultType="String">
		select file_name from
		upload where product_code = #{product_code} and thumbnail_whether =
		'y'
	</select>

	<!-- 사용자가 선택한 조건에 해당하는 상품 리스트 가져오기 -->
	<select id="selectList" resultMap="ProductVO">
		select X.rnum,X.*
		from(
		select rownum as rnum, A.*
		from(
		select *
		from
		product o
		<where>
			<if test="space != 0">
				p_space = #{space}
			</if>
			<if test="!sido.equals('광역시/도') or !sigoon.equals('선택')">
				and product_code in (
				select p.product_code
				from product p,
				P_POSSIBLE_AREA pa, area a
				where p.product_code = pa.product_code and
				pa.AREA_CODE = a.AREA_CODE
				<if test="!sido.equals('광역시/도')">
					and a.area_do=#{sido}
				</if>
				<if test="!sigoon.equals('선택')">
					and a.area_si in(#{sigoon},(select area_si
					from area
					where area_do = #{sido}
					and area_si like '%전체'))
				</if>
				)
			</if>
			<if test="!matter.equals('측정 물질')">
				and product_code in (
				select p.product_code
				from product p,
				p_measure_matter pm
				where p.product_code = pm.product_code
				and
				pm.matter_code = #{matter})
			</if>
		</where>
		<choose>
			<when test="sort.equals('sellnum')">
				order by (
				select count(*)
				from demand d,payment pa
				where o.product_code=d.product_code and d.demand_code =
				pa.demand_code
				and pa.refund_whether='n') desc, o.product_name
			</when>
			<when test="sort.equals('hprice')">
				order by o.product_price desc, o.product_name
			</when>
			<when test="sort.equals('lprice')">
				order by o.product_price, o.product_name
			</when>
			<when test="sort.equals('staravg')">
				order by (
				select avg(pa.STAR_SCORE)
				from demand
				d,payment pa
				where o.product_code=d.product_code and d.demand_code =
				pa.demand_code
				and pa.refund_whether='n') desc nulls last,
				o.product_name
			</when>
		</choose>)
		A
		where <![CDATA[rownum <= #{endnum}]]>)
		X
		where <![CDATA[X.rnum >= #{startnum}]]>
	</select>

	<!-- 사용자가 선택한 조건에 해당하는 상품 개수 가져오기 -->
	<select id="selectCount" resultType="int">
		select count(*)
		from product
		<where>
			<if test="space != 0">
				p_space = #{space}
			</if>
			<if test="!sido.equals('광역시/도') or !sigoon.equals('선택')">
				and product_code in (
				select p.product_code
				from product p,
				P_POSSIBLE_AREA pa, area a where p.product_code =
				pa.product_code and
				pa.AREA_CODE = a.AREA_CODE
				<if test="!sido.equals('광역시/도')">
					and a.area_do=#{sido}
				</if>
				<if test="!sigoon.equals('선택')">
					and a.area_si in(#{sigoon},(select area_si
					from area
					where area_do = #{sido}
					and area_si like '%전체'))
				</if>
				)
			</if>
			<if test="!matter.equals('측정 물질')">
				and product_code in (
				select p.product_code
				from product p,
				p_measure_matter pm
				where p.product_code = pm.product_code
				and
				pm.matter_code = #{matter})
			</if>
		</where>
	</select>

	<!-- 사용자가 선택한 상품 정보 가져오기 -->
	<select id="productContent" resultMap="ProductVO">
		select * from product
		where product_code = #{product_code}
	</select>

	<!-- 상품을 올린 회사가 맞는지 체크하기 -->
	<select id="writePersonCheck" resultType="String">
		select m.member_id
		from
		product p, company_info c, member m
		where p.company_code =
		c.company_code
		and c.member_id = m.member_id
		and
		p.product_code=#{product_code}
	</select>

	<!-- 상품 등록하기 -->
	<insert id="productInsert"
		parameterType="com.yjc.airq.domain.ProductVO">
		insert into
		product(product_code,product_name,product_detail,product_price,p_space,measure_point,company_code)
		values(#{product_code},#{product_name},#{product_detail},#{product_price},#{p_space},#{measure_point},#{company_code})
	</insert>

	<!-- 상품 update하기 -->
	<update id="productUpdate"
		parameterType="com.yjc.airq.domain.ProductVO">
		update product
		set product_name = #{product_name},
		product_detail = #{product_detail},
		product_price = #{product_price},
		p_space = #{p_space},
		measure_point = #{measure_point},
		company_code =
		#{company_code}
		where product_code = #{product_code}
	</update>

	<!--상품 삭제하기 -->
	<delete id="productDelete" parameterType="String">
		delete from product
		where product_code = #{product_code}
	</delete>

	<select id="productMP" resultMap="ProductVO">
		select * from product pr,
		company_info c
		where pr.COMPANY_CODE = c.COMPANY_CODE
		order by ROWNUM
		desc
	</select>

	<select id="productSMP" resultMap="ProductVO">
		select p.PRODUCT_CODE,
		p.PRODUCT_NAME, p.PRODUCT_PRICE, p.P_SPACE,
		p.MEASURE_POINT,
		p.COMPANY_CODE, count(re.original_code) as
		report_count
		from product p
		,company_info c, report re
		where p.company_code = c.company_code
		and
		p.product_code = re.ORIGINAL_CODE(+)
		and c.member_id = #{member_id}
		group by p.PRODUCT_CODE, p.PRODUCT_NAME, p.PRODUCT_PRICE, p.P_SPACE,
		p.MEASURE_POINT, p.COMPANY_CODE
	</select>

	<!-- 마이페이지 글관리 글수정하기 -->
	<select id="deletePostsProduct" parameterType="String">
		select
		product_code from product where product_code = #{product_code}
	</select>

	<!-- 리뷰 안한 목록 리스트 -->
	<select id="reviewCompareList"
		resultType="com.yjc.airq.domain.ProductVO">
		select t.product_code,t.product_name,t.product_price,
		t.p_space, t.measure_point, p.star_score, d.member_id,
		to_char(d.d_service_date,'yyyy-MM-dd hh24:mi') d_service_date,
		d.demand_code, p.payment_code
		from payment p,demand d,product t
		where
		sysdate>=d.d_service_date and p.demand_code=d.demand_code and
		d.product_code=t.product_code and p.refund_whether='n' and
		p.star_score is null and d.member_id=#{member_id}
		order by payment_date
	</select>

	<select id="reservationInfo" resultType="map"
		parameterType="String">
		select rownum, member_id,member_name,product_name,to_char(d_service_date,'yyyy-MM-dd')
		from( select m.member_id,m.member_name,
		p.product_name, d.d_service_date
		from member m, product p, demand d
		where m.member_id = d.member_id
		and d.product_code = p.product_code
		and
		p.company_code = #{company_code}
		and d.d_service_date > sysdate
		order by
		d.d_service_date
		) r
		where<![CDATA[ rownum <= 5]]>
	</select>

	<select id="hotItemInfo" resultType="map" parameterType="String">
		select
		rownum, r.*
		from(
		select p.product_code, p.product_name, count(d.demand_code) as count,
		avg(py.star_score) as star
		from product p, demand d, payment py
		where p.product_code = d.product_code
		and d.demand_code = py.demand_code
		and p.company_code = '6118128001'
		group by p.product_code,p.product_name
		order by count(d.demand_code) desc) r
		where <![CDATA[ rownum <= 5]]>
	</select>
</mapper>